import { AttributeInfo } from '../internal/attributeInfo';
import { LinkElement } from './linkElement';
import { ListLevels } from './listLevels';
import { Style } from './style';
export declare const importsMapListInfo: {
    LinkElement: typeof LinkElement;
    ListLevels: typeof ListLevels;
    Style: typeof Style;
};
/**
 * DTO container with a single document list.
 */
export declare class ListInfo extends LinkElement {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets a value indicating whether this list is a definition of a list style.
     */
    isListStyleDefinition: boolean;
    /**
     * Gets or sets a value indicating whether this list is a reference to a list style.
     */
    isListStyleReference: boolean;
    /**
     * Gets or sets a value indicating whether the list contains 9 levels; false when 1 level.
     */
    isMultiLevel: boolean;
    /**
     * Gets or sets a value indicating whether list should be restarted at each section. The default value is false.
     */
    isRestartAtEachSection: boolean;
    /**
     * Gets or sets the unique identifier of the list.
     */
    listId: number;
    /**
     * Gets or sets the collection of list levels for this list.
     */
    listLevels: ListLevels;
    /**
     * Gets or sets the list style that this list references or defines.
     */
    style: Style;
    constructor(init?: Partial<ListInfo>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
