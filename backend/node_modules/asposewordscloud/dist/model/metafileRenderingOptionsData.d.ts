import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
export declare const importsMapMetafileRenderingOptionsData: {};
/**
 * Container class for options of metafile rendering.
 */
export declare class MetafileRenderingOptionsData implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the option that controls how EMF+ Dual metafiles should be rendered.
     */
    emfPlusDualRenderingMode: MetafileRenderingOptionsData.EmfPlusDualRenderingModeEnum;
    /**
     * Gets or sets a value indicating whether the raster operations should be emulated.
     */
    emulateRasterOperations: boolean;
    /**
     * Gets or sets the option that controls how metafile images should be rendered.
     */
    renderingMode: MetafileRenderingOptionsData.RenderingModeEnum;
    /**
     * Gets or sets a value indicating whether to scale fonts in WMF metafile according to metafile size on the page.
     * The default value is true.
     */
    scaleWmfFontsToMetafileSize: boolean;
    /**
     * Gets or sets the flag, that controls how WMF metafiles with embedded EMF metafiles should be rendered.
     */
    useEmfEmbeddedToWmf: boolean;
    constructor(init?: Partial<MetafileRenderingOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
/**
 * Enums for MetafileRenderingOptionsData
 */
export declare namespace MetafileRenderingOptionsData {
    enum EmfPlusDualRenderingModeEnum {
        EmfPlusWithFallback,
        EmfPlus,
        Emf
    }
    enum RenderingModeEnum {
        VectorWithFallback,
        Vector,
        Bitmap
    }
}
