import { AttributeInfo } from '../internal/attributeInfo';
import { DocumentPosition } from './documentPosition';
import { FootnoteLink } from './footnoteLink';
import { StoryChildNodes } from './storyChildNodes';
export declare const importsMapFootnote: {
    DocumentPosition: typeof DocumentPosition;
    FootnoteLink: typeof FootnoteLink;
    StoryChildNodes: typeof StoryChildNodes;
};
/**
 * DTO container with a footnote.
 */
export declare class Footnote extends FootnoteLink {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the content of the footnote.
     */
    content: StoryChildNodes;
    /**
     * Gets or sets the value, that specifies whether this is a footnote or endnote.
     */
    footnoteType: Footnote.FootnoteTypeEnum;
    /**
     * Gets or sets the link to comment range start node.
     */
    position: DocumentPosition;
    /**
     * Gets or sets the custom reference mark to be used for this footnote.
     * Default value is Empty, meaning auto-numbered footnotes are used.
     */
    referenceMark: string;
    /**
     * Gets or sets text of the footnote.
     */
    text: string;
    constructor(init?: Partial<Footnote>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
/**
 * Enums for Footnote
 */
export declare namespace Footnote {
    enum FootnoteTypeEnum {
        Footnote,
        Endnote
    }
}
