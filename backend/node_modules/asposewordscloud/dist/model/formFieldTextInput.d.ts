import { AttributeInfo } from '../internal/attributeInfo';
import { FormField } from './formField';
export declare const importsMapFormFieldTextInput: {
    FormField: typeof FormField;
};
/**
 * FormField text input element.
 */
export declare class FormFieldTextInput extends FormField {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the maximum length for the text field. Zero when the length is not limited.
     */
    maxLength: number;
    /**
     * Gets or sets the default string or a calculation expression of the text form field.
     */
    textInputDefault: string;
    /**
     * Gets or sets text formatting for the text form field.
     */
    textInputFormat: string;
    /**
     * Gets or sets the type of the text form field.
     */
    textInputType: FormFieldTextInput.TextInputTypeEnum;
    constructor(init?: Partial<FormFieldTextInput>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
/**
 * Enums for FormFieldTextInput
 */
export declare namespace FormFieldTextInput {
    enum TextInputTypeEnum {
        Regular,
        Number,
        Date,
        CurrentDate,
        CurrentTime,
        Calculated
    }
}
