import { AttributeInfo } from '../internal/attributeInfo';
import { LinkElement } from './linkElement';
import { PreferredWidth } from './preferredWidth';
export declare const importsMapTableCellFormat: {
    LinkElement: typeof LinkElement;
    PreferredWidth: typeof PreferredWidth;
};
/**
 * DTO container with all formatting for a table row.
 */
export declare class TableCellFormat extends LinkElement {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the amount of space (in points) to add below the contents of the cell.
     */
    bottomPadding: number;
    /**
     * Gets or sets a value indicating whether to fit text in the cell, compress each paragraph to the width of the cell.
     */
    fitText: boolean;
    /**
     * Gets or sets the option that controls how the cell is merged horizontally with other cells in the row.
     */
    horizontalMerge: TableCellFormat.HorizontalMergeEnum;
    /**
     * Gets or sets the amount of space (in points) to add to the left of the contents of the cell.
     */
    leftPadding: number;
    /**
     * Gets or sets the orientation of text in a table cell.
     */
    orientation: TableCellFormat.OrientationEnum;
    /**
     * Gets or sets the preferred width of the cell.
     */
    preferredWidth: PreferredWidth;
    /**
     * Gets or sets the amount of space (in points) to add to the right of the contents of the cell.
     */
    rightPadding: number;
    /**
     * Gets or sets the amount of space (in points) to add above the contents of the cell.
     */
    topPadding: number;
    /**
     * Gets or sets the vertical alignment of text in the cell.
     */
    verticalAlignment: TableCellFormat.VerticalAlignmentEnum;
    /**
     * Gets or sets the option that controls how the cell is merged with other cells vertically.
     */
    verticalMerge: TableCellFormat.VerticalMergeEnum;
    /**
     * Gets or sets the width of the cell in points.
     */
    width: number;
    /**
     * Gets or sets a value indicating whether to wrap text in the cell.
     */
    wrapText: boolean;
    constructor(init?: Partial<TableCellFormat>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
/**
 * Enums for TableCellFormat
 */
export declare namespace TableCellFormat {
    enum HorizontalMergeEnum {
        None,
        First,
        Previous
    }
    enum OrientationEnum {
        Horizontal,
        Downward,
        Upward,
        HorizontalRotatedFarEast,
        VerticalFarEast,
        VerticalRotatedFarEast
    }
    enum VerticalAlignmentEnum {
        Top,
        Center,
        Bottom
    }
    enum VerticalMergeEnum {
        None,
        First,
        Previous
    }
}
