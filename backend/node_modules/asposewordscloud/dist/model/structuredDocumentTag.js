"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="structuredDocumentTag.ts">
 *   Copyright (c) 2023 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructuredDocumentTag = exports.importsMapStructuredDocumentTag = void 0;
const nodeLink_1 = require("./nodeLink");
const structuredDocumentTagListItem_1 = require("./structuredDocumentTagListItem");
exports.importsMapStructuredDocumentTag = {
    NodeLink: nodeLink_1.NodeLink,
    StructuredDocumentTagListItem: structuredDocumentTagListItem_1.StructuredDocumentTagListItem,
};
/**
 * DTO container with a StructuredDocumentTag.
 */
class StructuredDocumentTag extends nodeLink_1.NodeLink {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(StructuredDocumentTag.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
}
exports.StructuredDocumentTag = StructuredDocumentTag;
/**
 * Attribute type map
 */
StructuredDocumentTag.attributeTypeMap = [
    {
        name: "appearance",
        baseName: "Appearance",
        type: "StructuredDocumentTag.AppearanceEnum",
    },
    {
        name: "buildingBlockCategory",
        baseName: "BuildingBlockCategory",
        type: "string",
    },
    {
        name: "buildingBlockGallery",
        baseName: "BuildingBlockGallery",
        type: "string",
    },
    {
        name: "calendarType",
        baseName: "CalendarType",
        type: "StructuredDocumentTag.CalendarTypeEnum",
    },
    {
        name: "checked",
        baseName: "Checked",
        type: "boolean",
    },
    {
        name: "color",
        baseName: "Color",
        type: "string",
    },
    {
        name: "dateDisplayFormat",
        baseName: "DateDisplayFormat",
        type: "string",
    },
    {
        name: "dateDisplayLocale",
        baseName: "DateDisplayLocale",
        type: "number",
    },
    {
        name: "dateStorageFormat",
        baseName: "DateStorageFormat",
        type: "StructuredDocumentTag.DateStorageFormatEnum",
    },
    {
        name: "fullDate",
        baseName: "FullDate",
        type: "Date",
    },
    {
        name: "id",
        baseName: "Id",
        type: "number",
    },
    {
        name: "isShowingPlaceholderText",
        baseName: "IsShowingPlaceholderText",
        type: "boolean",
    },
    {
        name: "isTemporary",
        baseName: "IsTemporary",
        type: "boolean",
    },
    {
        name: "level",
        baseName: "Level",
        type: "StructuredDocumentTag.LevelEnum",
    },
    {
        name: "listItems",
        baseName: "ListItems",
        type: "Array<StructuredDocumentTagListItem>",
    },
    {
        name: "lockContentControl",
        baseName: "LockContentControl",
        type: "boolean",
    },
    {
        name: "lockContents",
        baseName: "LockContents",
        type: "boolean",
    },
    {
        name: "multiline",
        baseName: "Multiline",
        type: "boolean",
    },
    {
        name: "placeholderName",
        baseName: "PlaceholderName",
        type: "string",
    },
    {
        name: "sdtType",
        baseName: "SdtType",
        type: "StructuredDocumentTag.SdtTypeEnum",
    },
    {
        name: "styleName",
        baseName: "StyleName",
        type: "string",
    },
    {
        name: "tag",
        baseName: "Tag",
        type: "string",
    },
    {
        name: "title",
        baseName: "Title",
        type: "string",
    },
    {
        name: "wordOpenXML",
        baseName: "WordOpenXML",
        type: "string",
    }
];
/**
 * Enums for StructuredDocumentTag
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (StructuredDocumentTag) {
    let AppearanceEnum;
    (function (AppearanceEnum) {
        AppearanceEnum[AppearanceEnum["Default"] = 'Default'] = "Default";
        AppearanceEnum[AppearanceEnum["BoundingBox"] = 'BoundingBox'] = "BoundingBox";
        AppearanceEnum[AppearanceEnum["Tags"] = 'Tags'] = "Tags";
        AppearanceEnum[AppearanceEnum["Hidden"] = 'Hidden'] = "Hidden";
    })(AppearanceEnum = StructuredDocumentTag.AppearanceEnum || (StructuredDocumentTag.AppearanceEnum = {}));
    let CalendarTypeEnum;
    (function (CalendarTypeEnum) {
        CalendarTypeEnum[CalendarTypeEnum["Default"] = 'Default'] = "Default";
        CalendarTypeEnum[CalendarTypeEnum["Gregorian"] = 'Gregorian'] = "Gregorian";
        CalendarTypeEnum[CalendarTypeEnum["GregorianArabic"] = 'GregorianArabic'] = "GregorianArabic";
        CalendarTypeEnum[CalendarTypeEnum["GregorianMeFrench"] = 'GregorianMeFrench'] = "GregorianMeFrench";
        CalendarTypeEnum[CalendarTypeEnum["GregorianUs"] = 'GregorianUs'] = "GregorianUs";
        CalendarTypeEnum[CalendarTypeEnum["GregorianXlitEnglish"] = 'GregorianXlitEnglish'] = "GregorianXlitEnglish";
        CalendarTypeEnum[CalendarTypeEnum["GregorianXlitFrench"] = 'GregorianXlitFrench'] = "GregorianXlitFrench";
        CalendarTypeEnum[CalendarTypeEnum["Hebrew"] = 'Hebrew'] = "Hebrew";
        CalendarTypeEnum[CalendarTypeEnum["Hijri"] = 'Hijri'] = "Hijri";
        CalendarTypeEnum[CalendarTypeEnum["Japan"] = 'Japan'] = "Japan";
        CalendarTypeEnum[CalendarTypeEnum["Korea"] = 'Korea'] = "Korea";
        CalendarTypeEnum[CalendarTypeEnum["None"] = 'None'] = "None";
        CalendarTypeEnum[CalendarTypeEnum["Saka"] = 'Saka'] = "Saka";
        CalendarTypeEnum[CalendarTypeEnum["Taiwan"] = 'Taiwan'] = "Taiwan";
        CalendarTypeEnum[CalendarTypeEnum["Thai"] = 'Thai'] = "Thai";
    })(CalendarTypeEnum = StructuredDocumentTag.CalendarTypeEnum || (StructuredDocumentTag.CalendarTypeEnum = {}));
    let DateStorageFormatEnum;
    (function (DateStorageFormatEnum) {
        DateStorageFormatEnum[DateStorageFormatEnum["Date"] = 'Date'] = "Date";
        DateStorageFormatEnum[DateStorageFormatEnum["DateTime"] = 'DateTime'] = "DateTime";
        DateStorageFormatEnum[DateStorageFormatEnum["Default"] = 'Default'] = "Default";
        DateStorageFormatEnum[DateStorageFormatEnum["Text"] = 'Text'] = "Text";
    })(DateStorageFormatEnum = StructuredDocumentTag.DateStorageFormatEnum || (StructuredDocumentTag.DateStorageFormatEnum = {}));
    let LevelEnum;
    (function (LevelEnum) {
        LevelEnum[LevelEnum["Unknown"] = 'Unknown'] = "Unknown";
        LevelEnum[LevelEnum["Inline"] = 'Inline'] = "Inline";
        LevelEnum[LevelEnum["Block"] = 'Block'] = "Block";
        LevelEnum[LevelEnum["Row"] = 'Row'] = "Row";
        LevelEnum[LevelEnum["Cell"] = 'Cell'] = "Cell";
    })(LevelEnum = StructuredDocumentTag.LevelEnum || (StructuredDocumentTag.LevelEnum = {}));
    let SdtTypeEnum;
    (function (SdtTypeEnum) {
        SdtTypeEnum[SdtTypeEnum["None"] = 'None'] = "None";
        SdtTypeEnum[SdtTypeEnum["Bibliography"] = 'Bibliography'] = "Bibliography";
        SdtTypeEnum[SdtTypeEnum["Citation"] = 'Citation'] = "Citation";
        SdtTypeEnum[SdtTypeEnum["Equation"] = 'Equation'] = "Equation";
        SdtTypeEnum[SdtTypeEnum["DropDownList"] = 'DropDownList'] = "DropDownList";
        SdtTypeEnum[SdtTypeEnum["ComboBox"] = 'ComboBox'] = "ComboBox";
        SdtTypeEnum[SdtTypeEnum["Date"] = 'Date'] = "Date";
        SdtTypeEnum[SdtTypeEnum["BuildingBlockGallery"] = 'BuildingBlockGallery'] = "BuildingBlockGallery";
        SdtTypeEnum[SdtTypeEnum["DocPartObj"] = 'DocPartObj'] = "DocPartObj";
        SdtTypeEnum[SdtTypeEnum["Group"] = 'Group'] = "Group";
        SdtTypeEnum[SdtTypeEnum["Picture"] = 'Picture'] = "Picture";
        SdtTypeEnum[SdtTypeEnum["RichText"] = 'RichText'] = "RichText";
        SdtTypeEnum[SdtTypeEnum["PlainText"] = 'PlainText'] = "PlainText";
        SdtTypeEnum[SdtTypeEnum["Checkbox"] = 'Checkbox'] = "Checkbox";
        SdtTypeEnum[SdtTypeEnum["RepeatingSection"] = 'RepeatingSection'] = "RepeatingSection";
        SdtTypeEnum[SdtTypeEnum["RepeatingSectionItem"] = 'RepeatingSectionItem'] = "RepeatingSectionItem";
        SdtTypeEnum[SdtTypeEnum["EntityPicker"] = 'EntityPicker'] = "EntityPicker";
    })(SdtTypeEnum = StructuredDocumentTag.SdtTypeEnum || (StructuredDocumentTag.SdtTypeEnum = {}));
})(StructuredDocumentTag = exports.StructuredDocumentTag || (exports.StructuredDocumentTag = {}));
// tslint:enable:quotemark
