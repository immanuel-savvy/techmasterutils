import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
import { DocumentPosition } from './documentPosition';
export declare const importsMapFootnoteBase: {
    DocumentPosition: typeof DocumentPosition;
};
/**
 * Footnote base class.
 */
export declare abstract class FootnoteBase implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the option, that specifies whether this is a footnote or endnote.
     */
    footnoteType: FootnoteBase.FootnoteTypeEnum;
    /**
     * Gets or sets the link to comment range start node.
     */
    position: DocumentPosition;
    /**
     * Gets or sets the custom reference mark to be used for this footnote.
     * Default value is Empty, meaning auto-numbered footnotes are used.
     */
    referenceMark: string;
    /**
     * Gets or sets text of the footnote.
     */
    text: string;
    constructor(init?: Partial<FootnoteBase>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
/**
 * Enums for FootnoteBase
 */
export declare namespace FootnoteBase {
    enum FootnoteTypeEnum {
        Footnote,
        Endnote
    }
}
