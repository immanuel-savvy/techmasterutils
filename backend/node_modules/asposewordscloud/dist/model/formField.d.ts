import { AttributeInfo } from '../internal/attributeInfo';
import { NodeLink } from './nodeLink';
export declare const importsMapFormField: {
    NodeLink: typeof NodeLink;
};
/**
 * FromField.
 */
export declare class FormField extends NodeLink {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets a value indicating whether references to the specified form field are automatically updated whenever the field is exited.
     */
    calculateOnExit: boolean;
    /**
     * Gets or sets a value indicating whether a form field is enabled.
     */
    enabled: boolean;
    /**
     * Gets or sets the entry macro name for the form field.
     */
    entryMacro: string;
    /**
     * Gets or sets the exit macro name for the form field.
     */
    exitMacro: string;
    /**
     * Gets or sets text, displayed in a message box when the form field has the focus and the user presses F1.
     */
    helpText: string;
    /**
     * Gets or sets the form field name.
     */
    name: string;
    /**
     * Gets or sets a value indicating whether the source of the text that's displayed in a message box when a form field has the focus and the user presses F1.
     */
    ownHelp: boolean;
    /**
     * Gets or sets a value indicating whether the source of the text that's displayed in the status bar when a form field has the focus.
     */
    ownStatus: boolean;
    /**
     * Gets or sets text, displayed in the status bar when a form field has the focus.
     */
    statusText: string;
    constructor(init?: Partial<FormField>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
