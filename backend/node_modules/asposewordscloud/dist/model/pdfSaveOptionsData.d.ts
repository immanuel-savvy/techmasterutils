import { AttributeInfo } from '../internal/attributeInfo';
import { DownsampleOptionsData } from './downsampleOptionsData';
import { FixedPageSaveOptionsData } from './fixedPageSaveOptionsData';
import { OutlineOptionsData } from './outlineOptionsData';
import { PdfDigitalSignatureDetailsData } from './pdfDigitalSignatureDetailsData';
import { PdfEncryptionDetailsData } from './pdfEncryptionDetailsData';
export declare const importsMapPdfSaveOptionsData: {
    DownsampleOptionsData: typeof DownsampleOptionsData;
    FixedPageSaveOptionsData: typeof FixedPageSaveOptionsData;
    OutlineOptionsData: typeof OutlineOptionsData;
    PdfDigitalSignatureDetailsData: typeof PdfDigitalSignatureDetailsData;
    PdfEncryptionDetailsData: typeof PdfEncryptionDetailsData;
};
/**
 * Container class for pdf save options.
 */
export declare class PdfSaveOptionsData extends FixedPageSaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets a value determining whether or not to cache graphics placed in document's background.
     */
    cacheBackgroundGraphics: boolean;
    /**
     * Gets or sets the PDF standards compliance level for output documents.
     */
    compliance: PdfSaveOptionsData.ComplianceEnum;
    /**
     * Gets or sets a value indicating whether to convert footnote/endnote references in main text story into active hyperlinks.
     * When clicked the hyperlink will lead to the corresponding footnote/endnote.
     * The default value is false.
     */
    createNoteHyperlinks: boolean;
    /**
     * Gets or sets the option that controls the way CustomDocumentProperties are exported to PDF file.
     * The default value is None.
     */
    customPropertiesExport: PdfSaveOptionsData.CustomPropertiesExportEnum;
    /**
     * Gets or sets the details for signing the output PDF document.
     */
    digitalSignatureDetails: PdfDigitalSignatureDetailsData;
    /**
     * Gets or sets a value indicating whether the windowâ€™s title bar should display the document title taken from the Title entry of the document information dictionary.
     */
    displayDocTitle: boolean;
    /**
     * Gets or sets the downsample options.
     */
    downsampleOptions: DownsampleOptionsData;
    /**
     * Gets or sets a value determining whether or not to embed attachments to the PDF document.
     */
    embedAttachments: boolean;
    /**
     * Gets or sets a value indicating whether fonts are embedded into the resulting PDF documents.
     */
    embedFullFonts: boolean;
    /**
     * Gets or sets the details for encrypting the output PDF document.
     */
    encryptionDetails: PdfEncryptionDetailsData;
    /**
     * Gets or sets a value indicating whether to export document structure.
     */
    exportDocumentStructure: boolean;
    /**
     * Gets or sets a value determining whether or not to create a "Span" tag in the document structure to export the text language.
     */
    exportLanguageToSpanTag: boolean;
    /**
     * Gets or sets the font embedding mode.
     */
    fontEmbeddingMode: PdfSaveOptionsData.FontEmbeddingModeEnum;
    /**
     * Gets or sets the option that controls how bookmarks in headers/footers are exported.
     * The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.
     */
    headerFooterBookmarksExportMode: PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum;
    /**
     * Gets or sets the option that controls how the color space will be selected for the images in PDF document.
     */
    imageColorSpaceExportMode: PdfSaveOptionsData.ImageColorSpaceExportModeEnum;
    /**
     * Gets or sets the compression type to be used for all images in the document.
     */
    imageCompression: string;
    /**
     * Gets or sets a value indicating whether image interpolation shall be performed by a conforming reader. When false is specified, the flag is not written to the output document and the default behavior of reader is used instead.
     */
    interpolateImages: boolean;
    /**
     * Gets or sets a value indicating whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.
     */
    openHyperlinksInNewWindow: boolean;
    /**
     * Gets or sets the outline options.
     */
    outlineOptions: OutlineOptionsData;
    /**
     * Gets or sets the option that controls how the PDF document should be displayed when opened in the PDF reader.
     */
    pageMode: PdfSaveOptionsData.PageModeEnum;
    /**
     * Gets or sets a value indicating whether to preblend transparent images with black background color.
     */
    preblendImages: boolean;
    /**
     * Gets or sets a value indicating whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.
     */
    preserveFormFields: boolean;
    /**
     * Gets or sets the compression type to be used for all textual content in the document.
     */
    textCompression: PdfSaveOptionsData.TextCompressionEnum;
    /**
     * Gets or sets a value indicating whether the document should be saved using a booklet printing layout.
     */
    useBookFoldPrintingSettings: boolean;
    /**
     * Gets or sets a value indicating whether to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.
     */
    useCoreFonts: boolean;
    /**
     * Gets or sets the option that controls what type of zoom should be applied when a document is opened with a PDF viewer.
     */
    zoomBehavior: PdfSaveOptionsData.ZoomBehaviorEnum;
    /**
     * Gets or sets the zoom factor (in percentages) for a document.
     */
    zoomFactor: number;
    constructor(init?: Partial<PdfSaveOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
}
/**
 * Enums for PdfSaveOptionsData
 */
export declare namespace PdfSaveOptionsData {
    enum ComplianceEnum {
        Pdf17,
        Pdf20,
        PdfA1a,
        PdfA1b,
        PdfA2a,
        PdfA2u,
        PdfA4,
        PdfUa1
    }
    enum CustomPropertiesExportEnum {
        None,
        Standard,
        Metadata
    }
    enum FontEmbeddingModeEnum {
        EmbedAll,
        EmbedNonstandard,
        EmbedNone
    }
    enum HeaderFooterBookmarksExportModeEnum {
        None,
        First,
        All
    }
    enum ImageColorSpaceExportModeEnum {
        Auto,
        SimpleCmyk
    }
    enum PageModeEnum {
        UseNone,
        UseOutlines,
        UseThumbs,
        FullScreen,
        UseOC,
        UseAttachments
    }
    enum TextCompressionEnum {
        None,
        Flate
    }
    enum ZoomBehaviorEnum {
        None,
        ZoomFactor,
        FitPage,
        FitWidth,
        FitHeight,
        FitBox
    }
}
